{"version":3,"sources":["Giphy.Services.js","Giphy.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","handleResponse","res","text","then","data","JSON","parse","ok","err","message","Promise","reject","Giphy_Services","getTrending","limit","rating","fetch","method","loadMoreTrending","offset","Giphy_HomePage","useState","setdata","setOffset","imagePreview","setimagePreview","useEffect","all","result","showModal","e","source","target","getAttribute","modal","document","getElementById","style","display","textAlign","length","map","gif","className","onClick","alt","title","src","images","preview_webp","url","original","webp","slug","clear","newData","os","id","width","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2MACMA,EAAS,mCAgBf,SAASC,EAAeC,GACpB,OAAOA,EAAIC,OAAOC,MAAK,SAAAD,GACnB,IAAME,EAAOC,KAAKC,MAAMJ,GACxB,IAAKD,EAAIM,GAAI,CACT,IAAMC,EAAMJ,GAAQA,EAAKK,QACzB,OAAOC,QAAQC,OAAOH,GAE1B,OAAOJ,KAIR,IAAMQ,EAAiB,CAC1BC,YA3BJ,SAAqBC,EAAOC,GAIxB,OAAOC,MAAM,kDAAD,OAAmDjB,EAAnD,kBAAmEe,EAAnE,mBAAmFC,GAHhF,CACXE,OAAQ,QAEqGd,KAAKH,IAwBtHkB,iBArBJ,SAA0BJ,EAAOC,EAAQI,GAIrC,OAAOH,MAAM,kDAAD,OAAmDjB,EAAnD,kBAAmEe,EAAnE,mBAAmFC,EAAnF,mBAAoGI,GAHjG,CACXF,OAAQ,QAEsHd,KAAKH,K,OCVrIoB,EAAiB,WAAO,IAAD,EACDC,mBAAS,IADR,mBAClBjB,EADkB,KACZkB,EADY,OAEGD,mBAAS,IAFZ,mBAElBF,EAFkB,KAEVI,EAFU,OAGeF,mBAAS,MAHxB,mBAGlBG,EAHkB,KAGJC,EAHI,KAKzBC,qBAAU,WACNhB,QAAQiB,IAAI,CAACf,EAAeC,YAAYM,EAAQ,OAAOhB,MAAK,SAAAyB,GACxDN,EAAQM,EAAO,GAAGxB,WAEvB,IAEH,IAQMyB,EAAY,SAAAC,GACd,IAAMC,EAASD,EAAEE,OAAOC,aAAa,UAC/BC,EAAQC,SAASC,eAAe,gBACtCX,EAAgBM,GAChBG,EAAMG,MAAMC,QAAU,SAQ1B,OACI,gCACI,oBAAID,MAAO,CAAEE,UAAW,UAAxB,4BACA,gCACOnC,GAAQA,EAAKoC,OAAS,EACrBpC,EAAKqC,KAAI,SAAAC,GAAG,OACR,sBAAKC,UAAU,WAAf,UACI,qBAAKA,UAAU,YAAYC,QAASf,EAAWgB,IAAKH,EAAII,MACpDC,IAAKL,EAAIM,OAAOC,aAAaC,IAAKnB,OAAQW,EAAIM,OAAOG,SAASC,OAClE,oBAAIT,UAAU,YAAYG,MAAOJ,EAAII,MAArC,SAA6CJ,EAAII,UAHtBJ,EAAIW,SAMrC,KACN,qBAAKV,UAAU,kBAAkBN,MAAO,CAAEiB,MAAO,OAAQf,UAAW,UAApE,SACI,wBAAQK,QAlCD,WACnBlC,QAAQiB,IAAI,CAACf,EAAeM,iBAAiB,GAAI,IAAKC,KAAUhB,MAAK,SAAAyB,GACjE,IAAM2B,EAAO,sBAAOnD,GAAP,YAAgBwB,EAAO,GAAGxB,OACvCkB,EAAQiC,GACRhC,GAAU,SAAAiC,GAAE,OAAIA,EAAK,UA8Bb,yBAEJ,qBAAKC,GAAG,eAAed,UAAU,QAAjC,SACI,sBAAKA,UAAU,gBAAf,UACI,sBAAMA,UAAU,QAAQC,QAvBxB,WACFT,SAASC,eAAe,gBAChCC,MAAMC,QAAU,QAqBN,kBACA,qBAAKK,UAAU,gBAAf,SACI,qBAAKI,IAAKvB,EACNkC,MAAM,OACNC,OAAO,uBC/CxBC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCQSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1ByB,M","file":"static/js/main.c0cdec76.chunk.js","sourcesContent":["\r\nconst apiKey = '1O6rgYcO7DdmXrZL4mt1shhb75NLscVM';\r\nfunction getTrending(limit, rating) {\r\n    const option = {\r\n        method: 'GET'\r\n    };\r\n    return fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${apiKey}&limit=${limit}&rating=${rating}`, option).then(handleResponse);\r\n}\r\n\r\nfunction loadMoreTrending(limit, rating, offset){\r\n    const option = {\r\n        method: 'GET'\r\n    };\r\n    return fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${apiKey}&limit=${limit}&rating=${rating}&offset=${offset}`, option).then(handleResponse);\r\n}\r\n\r\n// convert data into json\r\nfunction handleResponse(res) {\r\n    return res.text().then(text => {\r\n        const data = JSON.parse(text);\r\n        if (!res.ok) {\r\n            const err = data && data.message;\r\n            return Promise.reject(err);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nexport const Giphy_Services = {\r\n    getTrending,\r\n    loadMoreTrending\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Giphy_Services } from './Giphy.Services';\r\n\r\nconst Giphy_HomePage = () => {\r\n    const [data, setdata] = useState([]);\r\n    const [offset, setOffset] = useState(12);\r\n    const [imagePreview, setimagePreview] = useState(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([Giphy_Services.getTrending(offset, 'g')]).then(result => {\r\n            setdata(result[0].data);\r\n        });\r\n    }, []);\r\n\r\n    const handleLoadMore = () => {\r\n        Promise.all([Giphy_Services.loadMoreTrending(12, 'g', offset)]).then(result => {\r\n            const newData = [...data, ...result[0].data];\r\n            setdata(newData);\r\n            setOffset(os => os + 12);\r\n        });\r\n    };\r\n\r\n    const showModal = e => {\r\n        const source = e.target.getAttribute('source');\r\n        const modal = document.getElementById('previewModal');\r\n        setimagePreview(source);\r\n        modal.style.display = 'block';\r\n    };\r\n\r\n    const handleClose = () => {\r\n        const modal = document.getElementById('previewModal');\r\n        modal.style.display = 'none';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: 'center' }}>Giphy Trending</h1>\r\n            <div>\r\n                {!!data && data.length > 0 ?\r\n                    data.map(gif => (\r\n                        <div className='gif-item' key={gif.slug}>\r\n                            <img className='gif-image' onClick={showModal} alt={gif.title}\r\n                                src={gif.images.preview_webp.url} source={gif.images.original.webp} />\r\n                            <h4 className='gif-title' title={gif.title}>{gif.title}</h4>\r\n                        </div>\r\n                    ))\r\n                    : null}\r\n                <div className='button-loadmore' style={{ clear: 'both', textAlign: 'center' }}>\r\n                    <button onClick={handleLoadMore}>Load More</button>\r\n                </div>\r\n                <div id='previewModal' className='modal'>\r\n                    <div className='modal-content'>\r\n                        <span className='close' onClick={handleClose}>&times;</span>\r\n                        <div className='image-preview'>\r\n                            <img src={imagePreview}\r\n                                width='100%'\r\n                                height='100%'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Giphy_HomePage };\r\n","import { Giphy_HomePage } from './Giphy';\nfunction App() {\n  return (\n    <div className='App'>\n      <Giphy_HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}